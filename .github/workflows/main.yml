# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # bundle the spec and upload it to be used in other jobs
  bundle_openapi_spec:
    name: bundle_openapi_spec
    runs-on: node:16-alpine
    steps:
      - uses: actions/checkout@v2
      - run: npm install -g swagger-cli
      - run: mkdir -p tmp/artifacts
      - run: swagger-cli bundle transmitter_spec/openapi.yaml > tmp/artifacts/bundled.yaml
      - uses: actions/upload-artifact@v2
        name: bundled-spec
        path: tmp/artifacts/bundled.yaml

  # download the bundled spec, generate the swagger server, upload the generated spec
  generate_transmitter_server_spec:
    name: generate_transmitter_server_spec
    needs: bundle_openapi_spec
    runs-on: swaggerapi/swagger-codegen-cli-v3
    steps:
      - run: mkdir -p tmp/artifacts
      - uses: actions/download-artifact@v2
        with:
          name: bundled-spec
          path: tmp/artifacts/bundled.yaml
      - run: generate -i tmp/artifacts/bundled.yaml -l python-flask -o tmp/artifacts/transmitter
      - uses: actions/upload-artifact@v2
        name: generated-spec
        path: tmp/artifacts/transmitter/swagger_server/swagger/swagger.yaml

  # download the transmitter server spec, then generate and upload the pydantic models
  generate_pydantic_models:
    name: generate_pydantic_models
    needs: generate_transmitter_server_spec
    runs-on: python:3.9-slim-buster
    steps:
      - run: mkdir -p tmp/artifacts
      - uses: actions/download-artifact@v2
        with:
          name: generated-spec
          path: tmp/artifacts/swagger.yaml
      - run: pip install datamodel-code-generator
      - run: datamodel-codegen --input tmp/artifacts/swagger.yaml --enum-field-as-literal one --use-default --strict-nullable --target-python-version 3.9 --use-schema-description --disable-timestamp > tmp/artifacts/models.py
      - uses: actions/upload-artifact@v2
        with:
          name: models
          path: tmp/artifacts/models.py

  # ensure examples/transmitter/swagger_server/swagger/swagger.yaml is up to date
  check_swagger_yaml_up_to_date:
    name: check_swagger_yaml_up_to_date
    needs: generate_transmitter_server_spec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p tmp/artifacts
      - uses: actions/download-artifact@v2
        with:
          name: generated-spec
          path: tmp/artifacts/swagger.yaml
      - run: cmp --silent $GITHUB_WORKSPACE/examples/transmitter/swagger_server/swagger/swagger.yaml tmp/artifacts/swagger.yaml

  # ensure examples/transmitter/swagger_server/models.py is up to date
  check_models_py_up_to_date:
    name: check_models_py_up_to_date
    needs: generate_pydantic_models
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p tmp/artifacts
      - uses: actions/download-artifact@v2
        with:
          name: models
          path: tmp/artifacts/models.py
      - run: cmp --silent $GITHUB_WORKSPACE/examples/transmitter/swagger_server/models.py tmp/artifacts/models.py

  # Validate our OpenAPI spec
  validate_open_api_spec:
    name: validate_open_api_spec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Validate OpenAPI definition
        uses: char0n/swagger-editor-validate@v1.2.1
        with:
          definition-file: $GITHUB_WORKSPACE/examples/transmitter/swagger_server/swagger/swagger.yaml

  # runs tests on our example transmitter
  test_example_transmitter:
    name: test_example_transmitter
    runs-on: python:3.9
    steps:
      - uses: actions/checkout@v2
      - run: cd $GITHUB_WORKSPACE/examples/transmitter
      - run: pip3 install -r requirements.txt
      - run: pip3 install -r test-requirements.txt
      - run: python3 -m tox
